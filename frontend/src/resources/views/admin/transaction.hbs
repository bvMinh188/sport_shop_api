<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="card-title mb-0">Thông Tin Đơn Hàng</h3>
                        {{#if totalPages}}
                        <nav aria-label="Page navigation" class="mb-0">
                            <ul class="pagination mb-0">
                                <li class="page-item {{#if (eq currentPage 1)}}disabled{{/if}}">
                                    <a class="page-link" href="?page={{subtract currentPage 1}}" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                {{#times totalPages}}
                                <li class="page-item {{#if (eq this ../currentPage)}}active{{/if}}">
                                    <a class="page-link" href="?page={{this}}">{{this}}</a>
                                </li>
                                {{/times}}
                                <li class="page-item {{#if (eq currentPage totalPages)}}disabled{{/if}}">
                                    <a class="page-link" href="?page={{add currentPage 1}}" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                        {{/if}}
                    </div>
                </div>
                <div class="alert-container" style="display: none;">
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <span class="message"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="statusFilter" class="form-label">Lọc theo trạng thái:</label>
                        <select id="statusFilter" class="form-select" style="width: 200px; display: inline-block;">
                            <option value="all">Tất cả</option>
                            <option value="chờ xác nhận">Chờ xác nhận</option>
                            <option value="đang giao hàng">Đang giao hàng</option>
                            <option value="đã giao hàng">Đã giao hàng</option>
                            <option value="đã hủy">Đã hủy</option>
                        </select>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th style="width: 5%">STT</th>
                                    <th style="width: 15%">Tên Người nhận</th>
                                    <th style="width: 20%">Địa chỉ</th>
                                    <th style="width: 10%">Số điện thoại</th>
                                    <th style="width: 10%">Giá</th>
                                    <th style="width: 15%">Thời gian</th>
                                    <th style="width: 12%">Trạng thái</th>
                                    <th style="width: 13%">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="orders-table-body">
                                <!-- Dữ liệu sẽ được thêm vào đây bằng JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
$(document).ready(function() {
    // Lấy danh sách đơn hàng từ API
    async function fetchOrders(status = 'all') {
        try {
            const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];
            let url = 'http://localhost:3000/api/orders/allorders';
            if (status && status !== 'all') {
                url += `?status=${encodeURIComponent(status)}`;
            }
            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                credentials: 'include' // Include cookies in the request
            });
            const data = await response.json();

            if (data.success && data.data.orders) {
                let orders = data.data.orders;
                // Sắp xếp theo thời gian mới nhất đến cũ nhất
                orders = orders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                const tbody = $('#orders-table-body');
                tbody.empty();

                orders.forEach((order, index) => {
                    const row = $(`
                        <tr>
                            <td class="text-center">${index + 1}</td>
                            <td>${order.name}</td>
                            <td class="address-cell" title="${order.address}">${order.address}</td>
                            <td class="text-center">${order.phone}</td>
                            <td class="text-end">${order.price}</td>
                            <td class="text-center">${order.createdAt}</td>
                            <td class="text-center">
                                <span class="badge rounded-pill" style="background-color: ${
                                    order.status === 'chờ xác nhận' ? '#ffc107' :
                                    order.status === 'đang giao hàng' ? '#0d6efd' :
                                    order.status === 'đã giao hàng' ? '#198754' :
                                    order.status === 'đã hủy' ? '#dc3545' :
                                    '#6c757d'
                                }">
                                    ${order.status}
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn btn-primary btn-sm btn-detail-order" data-id="${order._id}" data-bs-toggle="modal" data-bs-target="#detail-order-modal">Xem</button>

                                    ${
                                        order.status === 'chờ xác nhận' ? `
                                            <button class="btn btn-success btn-sm btn-confirm" data-id="${order._id}">
                                                Xác nhận
                                            </button>
                                            <button class="btn btn-danger btn-sm" data-bs-toggle="modal" 
                                                data-id="${order._id}" data-bs-target="#delete-order-modal">
                                                Hủy
                                            </button>
                                        ` : ''
                                    }

                                    ${
                                        order.status === 'đang giao hàng' ? `
                                            <button class="btn btn-success btn-sm btn-complete" data-id="${order._id}">
                                                Hoàn thành
                                            </button>
                                        ` : ''
                                    }
                                </div>
                            </td>
                        </tr>
                    `);
                    tbody.append(row);
                });
            }
        } catch (error) {
            console.error('Error fetching orders:', error);
            alert('Có lỗi xảy ra khi lấy danh sách đơn hàng');
        }
    }

    // Gọi API khi trang load với giá trị mặc định
    fetchOrders($('#statusFilter').val() || 'all');

    // Thêm sự kiện cho dropdown lọc trạng thái
    $('#statusFilter').on('change', function() {
        const selectedStatus = $(this).val();
        fetchOrders(selectedStatus);
    });

    // Hàm render chi tiết đơn hàng vào modal
    async function showOrderDetail(orderId) {
        try {
            const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];
            const response = await fetch(`http://localhost:3000/api/orders/${orderId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                credentials: 'include'
            });
            const data = await response.json();
            if (data.success && data.data.order) {
                const order = data.data.order;
                $('#customer-name').text(order.name);
                $('#customer-phone').text(order.phone);
                $('#customer-address').text(order.address);
                $('#order-total').text(order.price);
                // Render sản phẩm
                const productsTbody = $('#order-products');
                productsTbody.empty();
                order.products.forEach((item, idx) => {
                    productsTbody.append(`
                        <tr>
                            <td>${idx + 1}</td>
                            <td>${item.productName || item.name}</td>
                            <td>${item.size}</td>
                            <td>${item.quantity}</td>
                        </tr>
                    `);
                });
            }
        } catch (error) {
            $('#customer-name').text('Lỗi tải dữ liệu');
            $('#customer-phone').text('');
            $('#customer-address').text('');
            $('#order-total').text('');
            $('#order-products').html('<tr><td colspan="4">Không thể tải chi tiết đơn hàng</td></tr>');
        }
    }

    // Bắt sự kiện mở modal chi tiết đơn hàng
    $(document).on('click', '.btn-detail-order', function() {
        const orderId = $(this).data('id');
        showOrderDetail(orderId);
    });

    // Xử lý nút hủy đơn hàng
    let currentOrderId = null;

    $('#delete-order-modal').on('show.bs.modal', function(event) {
        const button = $(event.relatedTarget);
        currentOrderId = button.data('id');
    });

    $('#btn-delete-order').on('click', async function() {
        if (!currentOrderId) {
            showError('Không tìm thấy ID đơn hàng');
            return;
        }

        try {
            const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];
            
            if (!token) {
                showError('Không tìm thấy token');
                return;
            }

            const response = await fetch(`http://localhost:3000/api/orders/${currentOrderId}/cancel`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (response.ok && result.success) {
                showSuccess('Đơn hàng đã được hủy thành công');
                // Đóng modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('delete-order-modal'));
                modal.hide();
                // Tải lại danh sách đơn hàng
                await fetchOrders();
                // Reset currentOrderId
                currentOrderId = null;
            } else {
                showError(result.message || 'Có lỗi xảy ra khi hủy đơn hàng');
            }
        } catch (error) {
            showError('Có lỗi xảy ra khi hủy đơn hàng: ' + error.message);
        }
    });

    // Hàm hiển thị thông báo thành công
    function showSuccess(message) {
        const alertContainer = $('.alert-container');
        const alert = alertContainer.find('.alert');
        alert.removeClass('alert-danger').addClass('alert-success');
        alert.find('.message').text(message);
        alertContainer.show();
        
        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            alertContainer.hide();
        }, 3000);
    }

    // Hàm hiển thị thông báo lỗi
    function showError(message) {
        const alertContainer = $('.alert-container');
        const alert = alertContainer.find('.alert');
        alert.removeClass('alert-success').addClass('alert-danger');
        alert.find('.message').text(message);
        alertContainer.show();
        
        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            alertContainer.hide();
        }, 3000);
    }
});
</script>

<style>
    /* Custom alert styles */
    .alert-container .alert {
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
    }

    .alert-container .alert-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .alert-container .alert-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .alert-container .btn-close {
        color: white;
        opacity: 0.5;
    }

    .alert-container .btn-close:hover {
        opacity: 0.75;
    }
</style>

<!-- Modal Chi tiết đơn hàng -->
<div id="detail-order-modal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Chi tiết đơn hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
                <div class="order-info mb-4">
                    <h6 class="border-bottom pb-2">Thông tin khách hàng</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Tên khách hàng:</strong> <span id="customer-name"></span></p>
                            <p><strong>Số điện thoại:</strong> <span id="customer-phone"></span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Địa chỉ:</strong> <span id="customer-address"></span></p>
                            <p><strong>Tổng tiền:</strong> <span id="order-total"></span></p>
                        </div>
                    </div>
                </div>
                <div class="order-products">
                    <h6 class="border-bottom pb-2">Danh sách sản phẩm</h6>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>STT</th>
                                    <th>Tên sản phẩm</th>
                                    <th>Size</th>
                                    <th>Số lượng</th>
                                </tr>
                            </thead>
                            <tbody id="order-products">
                            </tbody>
                        </table>
                    </div>
                </div>
      </div>
      <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal Xác Nhận Hủy -->
<div id="delete-order-modal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
                <h5 class="modal-title">Xác nhận hủy</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Bạn có chắc chắn muốn hủy đơn hàng này không?</p>
                <p class="text-danger">Hành động này không thể hoàn tác.</p>
      </div>
            <div class="modal-footer" style="justify-content: center; gap: 10px;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="min-width: 100px;">Không</button>
                <button id="btn-delete-order" type="button" class="btn btn-danger" style="min-width: 100px;">Xác nhận</button>
      </div>
    </div>
  </div>
</div>

{{!-- Form Ẩn --}}
<form name="delete-order-form" method="POST" action="" class="d-none">
    <input type="hidden" name="_method" value="DELETE">
</form>

{{!-- Form xác nhận --}}
<form name="confirm-order-form" method="POST" action="" class="d-none">
    <input type="hidden" name="_method" value="PATCH">
</form>

{{!-- Form hoàn thành --}}
<form name="complete-order-form" method="POST" action="" class="d-none">
    <input type="hidden" name="_method" value="PATCH">
</form>

<style>
.action-buttons {
    display: flex;
    gap: 5px;
    justify-content: center;
}

.btn-sm {
    padding: 0.25rem 0.5rem;
}

.table th {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    vertical-align: middle;
}

.table td {
    vertical-align: middle;
    padding: 0.5rem;
}

.address-cell {
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.badge {
    font-weight: 500;
    padding: 0.5em 0.75em;
}

.modal-content {
    border-radius: 8px;
}

.modal-header, .modal-footer {
    padding: 1rem;
}

.modal-body {
    padding: 1rem;
}
</style>

<script>
$(document).ready(function() {
    // Lấy danh sách đơn hàng từ API
    async function fetchOrders(status = 'all') {
        try {
            const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];
            let url = 'http://localhost:3000/api/orders/allorders';
            if (status && status !== 'all') {
                url += `?status=${encodeURIComponent(status)}`;
            }
            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                credentials: 'include' // Include cookies in the request
            });
            const data = await response.json();

            if (data.success && data.data.orders) {
                let orders = data.data.orders;
                // Sắp xếp theo thời gian mới nhất đến cũ nhất
                orders = orders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                const tbody = $('#orders-table-body');
                tbody.empty();

                orders.forEach((order, index) => {
                    const row = $(`
                        <tr>
                            <td class="text-center">${index + 1}</td>
                            <td>${order.name}</td>
                            <td class="address-cell" title="${order.address}">${order.address}</td>
                            <td class="text-center">${order.phone}</td>
                            <td class="text-end">${order.price}</td>
                            <td class="text-center">${order.createdAt}</td>
                            <td class="text-center">
                                <span class="badge rounded-pill" style="background-color: ${
                                    order.status === 'chờ xác nhận' ? '#ffc107' :
                                    order.status === 'đang giao hàng' ? '#0d6efd' :
                                    order.status === 'đã giao hàng' ? '#198754' :
                                    order.status === 'đã hủy' ? '#dc3545' :
                                    '#6c757d'
                                }">
                                    ${order.status}
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn btn-primary btn-sm btn-detail-order" data-id="${order._id}" data-bs-toggle="modal" data-bs-target="#detail-order-modal">Xem</button>

                                    ${
                                        order.status === 'chờ xác nhận' ? `
                                            <button class="btn btn-success btn-sm btn-confirm" data-id="${order._id}">
                                                Xác nhận
                                            </button>
                                            <button class="btn btn-danger btn-sm" data-bs-toggle="modal" 
                                                data-id="${order._id}" data-bs-target="#delete-order-modal">
                                                Hủy
                                            </button>
                                        ` : ''
                                    }

                                    ${
                                        order.status === 'đang giao hàng' ? `
                                            <button class="btn btn-success btn-sm btn-complete" data-id="${order._id}">
                                                Hoàn thành
                                            </button>
                                        ` : ''
                                    }
                                </div>
                            </td>
                        </tr>
                    `);
                    tbody.append(row);
                });
            }
        } catch (error) {
            console.error('Error fetching orders:', error);
            alert('Có lỗi xảy ra khi lấy danh sách đơn hàng');
        }
    }

    // Gọi API khi trang load với giá trị mặc định
    fetchOrders($('#statusFilter').val() || 'all');

    // Thêm sự kiện cho dropdown lọc trạng thái
    $('#statusFilter').on('change', function() {
        const selectedStatus = $(this).val();
        fetchOrders(selectedStatus);
    });

    // Xử lý nút xác nhận đơn hàng
    $(document).on('click', '.btn-confirm', async function(event) {
        event.preventDefault();
        const orderId = $(this).data('id');
        
        try {
            const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];
            
            if (!token) {
                showError('Không tìm thấy token');
                return;
            }

            const response = await fetch(`http://localhost:3000/api/orders/${orderId}/confirm`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (response.ok && result.success) {
                showSuccess('Đơn hàng đã được xác nhận thành công');
                // Tải lại danh sách đơn hàng
                fetchOrders();
            } else {
                showError(result.message || 'Có lỗi xảy ra khi xác nhận đơn hàng');
            }
        } catch (error) {
            showError('Có lỗi xảy ra khi xác nhận đơn hàng: ' + error.message);
        }
    });

    // Xử lý nút hoàn thành đơn hàng
    $(document).on('click', '.btn-complete', async function(event) {
        event.preventDefault();
        const orderId = $(this).data('id');
        
        try {
            const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];
            
            if (!token) {
                showError('Không tìm thấy token');
                return;
            }

            const response = await fetch(`http://localhost:3000/api/orders/${orderId}/complete`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (response.ok && result.success) {
                showSuccess('Đơn hàng đã được hoàn thành thành công');
                // Tải lại danh sách đơn hàng
                fetchOrders();
            } else {
                showError(result.message || 'Có lỗi xảy ra khi hoàn thành đơn hàng');
            }
        } catch (error) {
            showError('Có lỗi xảy ra khi hoàn thành đơn hàng: ' + error.message);
        }
    });

    // Hàm hiển thị thông báo thành công
    function showSuccess(message) {
        const alertContainer = $('.alert-container');
        const alert = alertContainer.find('.alert');
        alert.removeClass('alert-danger').addClass('alert-success');
        alert.find('.message').text(message);
        alertContainer.show();
        
        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            alertContainer.hide();
        }, 3000);
    }

    // Hàm hiển thị thông báo lỗi
    function showError(message) {
        const alertContainer = $('.alert-container');
        const alert = alertContainer.find('.alert');
        alert.removeClass('alert-success').addClass('alert-danger');
        alert.find('.message').text(message);
        alertContainer.show();
        
        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            alertContainer.hide();
        }, 3000);
    }
});
</script>
