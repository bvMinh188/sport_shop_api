<div class="container-fluid">
    <!-- Message Modal -->
    <div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageModalLabel">Thông báo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="messageText"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Thêm Mới Sản Phẩm</h3>
                </div>
                <div class="card-body">
                    <!-- Message Form -->
                    <div id="messageForm" class="alert d-none mb-3" role="alert">
                        <span id="messageText"></span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    {{#if error}}
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        {{error}}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                    {{/if}}

                    <form id="addProductForm" method="POST">
                        <div class="row">
                            <div class="col-md-8">
                                <!-- Thông tin cơ bản -->
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h5 class="card-title mb-3">Thông tin cơ bản</h5>
                                        
                                        <div class="mb-3">
                                            <label for="name" class="form-label">Tên sản phẩm <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="name" name="name" value="{{values.name}}" required>
                                        </div>

                                        <div class="mb-3">
                                            <label for="description" class="form-label">Mô tả <span class="text-danger">*</span></label>
                                            <textarea class="form-control" id="description" name="description" rows="3" required>{{values.description}}</textarea>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="category" class="form-label">Danh mục <span class="text-danger">*</span></label>
                                                    <select class="form-select" id="category" name="category" required>
                                                        <option value="">Chọn danh mục</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="price" class="form-label">Giá <span class="text-danger">*</span></label>
                                                    <div class="input-group">
                                                        <input type="number" class="form-control" id="price" name="price" min="0" value="{{values.price}}" required>
                                                        <span class="input-group-text">VNĐ</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label for="image" class="form-label">Link hình ảnh <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="image" name="image" value="{{values.image}}" placeholder="Nhập URL hình ảnh" required>
                                        </div>
                                        <div id="imagePreview" class="mt-2 text-center {{#unless values.image}}d-none{{/unless}}">
                                            <img src="{{values.image}}" alt="Preview" class="img-fluid">
                                        </div>
                                    </div>
                                </div>

                                <!-- Kích thước và số lượng -->
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h5 class="card-title mb-3">Kích thước và số lượng</h5>
                                        <div class="row" id="sizesContainer">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2 mt-3">
                            <a href="/admin/product" class="btn btn-secondary">Hủy</a>
                            <button type="submit" class="btn btn-primary">Thêm mới</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.card {
    border: none;
    box-shadow: 0 0 10px rgba(0,0,0,.1);
    border-radius: 8px;
}

.card-title {
    color: #333;
    font-weight: 600;
}

.form-label {
    font-weight: 500;
    color: #555;
}

.input-group-text {
    background-color: #f8f9fa;
    color: #555;
}

.btn {
    padding: 8px 20px;
    font-weight: 500;
}

.btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

.btn-secondary {
    background-color: #6c757d;
    border-color: #6c757d;
}

#imagePreview img {
    max-height: 200px;
    object-fit: contain;
}

.alert {
    margin-bottom: 1rem;
    border-radius: 4px;
    padding: 1rem;
}

.alert-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

.alert-dismissible {
    padding-right: 3rem;
}

.alert .btn-close {
    position: absolute;
    top: 0;
    right: 0;
    padding: 1rem;
}

/* Enhanced Modal Styles */
.modal-content {
    border: none;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,.2);
    overflow: hidden;
    transform: scale(0.95);
    transition: transform 0.3s ease;
}

.modal.show .modal-content {
    transform: scale(1);
}

.modal-header {
    border: none;
    padding: 1.5rem;
    position: relative;
}

.modal-header.bg-success {
    background: linear-gradient(45deg, #28a745, #20c997) !important;
}

.modal-header.bg-danger {
    background: linear-gradient(45deg, #dc3545, #c82333) !important;
}

.modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    letter-spacing: 0.5px;
}

.modal-body {
    padding: 2rem 1.5rem;
    font-size: 1.1rem;
    line-height: 1.6;
    color: #444;
    text-align: center;
}

.modal-footer {
    border: none;
    padding: 1rem 1.5rem;
    background-color: #f8f9fa;
}

.modal .btn-close {
    position: absolute;
    right: 1rem;
    top: 1rem;
    padding: 0.5rem;
    background-color: rgba(255,255,255,0.2);
    border-radius: 50%;
    transition: all 0.3s ease;
}

.modal .btn-close:hover {
    background-color: rgba(255,255,255,0.3);
    transform: rotate(90deg);
}

.modal .btn-secondary {
    background: #6c757d;
    border: none;
    padding: 0.6rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.modal .btn-secondary:hover {
    background: #5a6268;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,.1);
}

/* Animation for modal */
@keyframes modalFadeIn {
    from {
        opacity: 0;
        transform: scale(0.95);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

.modal.fade .modal-dialog {
    transform: scale(0.95);
    transition: transform 0.3s ease;
}

.modal.show .modal-dialog {
    transform: scale(1);
}

/* Custom scrollbar for modal */
.modal-body::-webkit-scrollbar {
    width: 8px;
}

.modal-body::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.modal-body::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

.modal-body::-webkit-scrollbar-thumb:hover {
    background: #555;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Get token from localStorage
    const token = localStorage.getItem('token');
    
    // Initialize modal
    const messageModal = new bootstrap.Modal(document.getElementById('messageModal'));
    
    // Create size inputs
    const sizesContainer = document.getElementById('sizesContainer');
    const allSizes = [38,39,40,41,42,43,44];
    
    allSizes.forEach((size, index) => {
        const col = document.createElement('div');
        col.className = 'col-md-2';
        col.innerHTML = `
            <div class="mb-3">
                <label for="size${size}" class="form-label">Size ${size}</label>
                <input type="number" class="form-control" id="size${size}" name="sizes[${index}][size]" value="${size}" readonly hidden>
                <input type="number" class="form-control" name="sizes[${index}][quantity]" min="0" value="0">
            </div>
        `;
        sizesContainer.appendChild(col);
    });
    
    // Function to show message
    function showMessage(message, type = 'success') {
        const messageText = document.getElementById('messageText');
        const modalContent = document.querySelector('.modal-content');
        
        // Set message
        messageText.textContent = message;
        
        // Set modal style based on type
        modalContent.className = 'modal-content';
        if (type === 'success') {
            modalContent.classList.add('border-success');
            document.querySelector('.modal-header').className = 'modal-header bg-success text-white';
        } else {
            modalContent.classList.add('border-danger');
            document.querySelector('.modal-header').className = 'modal-header bg-danger text-white';
        }
        
        // Show modal
        messageModal.show();
        
        // Auto hide after 3 seconds if success
        if (type === 'success') {
            setTimeout(() => {
                messageModal.hide();
            }, 3000);
        }
    }
    
    // Fetch categories from API
    fetch('http://localhost:3000/api/categories', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const categorySelect = document.getElementById('category');
                data.data.categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.name;
                    option.textContent = category.name;
                    categorySelect.appendChild(option);
                });
            }
        })
        .catch(error => {
            console.error('Error fetching categories:', error);
            showMessage('Có lỗi xảy ra khi tải danh mục', 'danger');
        });

    // Handle form submission
    const form = document.getElementById('addProductForm');
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Get form data
        const formData = {
            name: document.getElementById('name').value,
            description: document.getElementById('description').value,
            category: document.getElementById('category').value,
            price: parseFloat(document.getElementById('price').value),
            image: document.getElementById('image').value,
            sizes: []
        };

        // Get sizes data
        const sizeInputs = document.querySelectorAll('input[name^="sizes["]');
        sizeInputs.forEach((input, index) => {
            if (index % 2 === 1) { // Only process quantity inputs
                const sizeValue = sizeInputs[index - 1].value;
                const quantityValue = input.value;
                if (quantityValue > 0) {
                    formData.sizes.push({
                        size: parseInt(sizeValue),
                        quantity: parseInt(quantityValue)
                    });
                }
            }
        });

        try {
            const response = await fetch('http://localhost:3000/api/products', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (data.success) {
                showMessage('Thêm sản phẩm thành công!', 'success');
                setTimeout(() => {
                    window.location.href = '/admin/product';
                }, 1500);
            } else {
                showMessage(data.message || 'Có lỗi xảy ra khi thêm sản phẩm', 'danger');
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage('Có lỗi xảy ra khi thêm sản phẩm', 'danger');
        }
    });

    // Preview ảnh khi nhập link
    const imageInput = document.getElementById('image');
    const imagePreview = document.getElementById('imagePreview');
    
    imageInput.addEventListener('input', function() {
        const imageUrl = this.value.trim();
        if (imageUrl) {
            imagePreview.classList.remove('d-none');
            imagePreview.querySelector('img').src = imageUrl;
        } else {
            imagePreview.classList.add('d-none');
        }
    });

    // Format giá tiền khi nhập
    const priceInput = document.getElementById('price');
    priceInput.addEventListener('input', function() {
        if (this.value < 0) this.value = 0;
    });
});
</script>
