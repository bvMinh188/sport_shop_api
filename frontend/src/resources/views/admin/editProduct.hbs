<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Chỉnh Sửa Sản Phẩm</h3>
                </div>
                <div class="card-body">
                    {{#if error}}
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        {{error}}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                    {{/if}}

                    <form id="editProductForm" method="POST">
                        <div class="row">
                            <div class="col-md-8">
                                <!-- Thông tin cơ bản -->
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h5 class="card-title mb-3">Thông tin cơ bản</h5>
                                        
                                        <div class="mb-3">
                                            <label for="name" class="form-label">Tên sản phẩm <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="name" name="name" required>
                                        </div>

                                        <div class="mb-3">
                                            <label for="description" class="form-label">Mô tả <span class="text-danger">*</span></label>
                                            <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="category" class="form-label">Danh mục <span class="text-danger">*</span></label>
                                                    <select class="form-select" id="category" name="category" required>
                                                        <option value="">Chọn danh mục</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="price" class="form-label">Giá <span class="text-danger">*</span></label>
                                                    <div class="input-group">
                                                        <input type="number" class="form-control" id="price" name="price" min="0" required>
                                                        <span class="input-group-text">VNĐ</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label for="image" class="form-label">Link hình ảnh <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="image" name="image" placeholder="Nhập URL hình ảnh" required>
                                        </div>
                                        <div id="imagePreview" class="mt-2 text-center">
                                            <img src="" alt="" class="img-fluid">
                                        </div>
                                    </div>
                                </div>

                                <!-- Kích thước và số lượng -->
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <h5 class="card-title mb-3">Kích thước và số lượng</h5>
                                        <div class="row" id="sizesContainer">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2 mt-3">
                            <a href="/admin/product" class="btn btn-secondary">Hủy</a>
                            <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.card {
    border: none;
    box-shadow: 0 0 10px rgba(0,0,0,.1);
    border-radius: 8px;
}

.card-title {
    color: #333;
    font-weight: 600;
}

.form-label {
    font-weight: 500;
    color: #555;
}

.input-group-text {
    background-color: #f8f9fa;
    color: #555;
}

.btn {
    padding: 8px 20px;
    font-weight: 500;
}

.btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

.btn-secondary {
    background-color: #6c757d;
    border-color: #6c757d;
}

#imagePreview img {
    max-height: 200px;
    object-fit: contain;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const path = window.location.pathname;

    const segments = path.split('/'); 
    const productId = segments[segments.length - 1];
    const apiBase = 'http://localhost:3000/api';

    // Fetch product data
    fetch(`${apiBase}/products/${productId}`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const product = data.data.product;
            // Fill form with product data
            document.getElementById('name').value = product.name;
            document.getElementById('description').value = product.description;
            document.getElementById('price').value = product.price;
            document.getElementById('image').value = product.image;
            document.getElementById('imagePreview').querySelector('img').src = product.image;
            document.getElementById('imagePreview').querySelector('img').alt = product.name;

            // Create size inputs
            const sizesContainer = document.getElementById('sizesContainer');
            const allSizes = [38,39,40,41,42,43,44];
            
            allSizes.forEach((size, index) => {
                const existingSize = product.sizes.find(s => s.size === size);
                const col = document.createElement('div');
                col.className = 'col-md-2';
                col.innerHTML = `
                    <div class="mb-3">
                        <label for="size${size}" class="form-label">Size ${size}</label>
                        <input type="number" class="form-control" id="size${size}" name="sizes[${index}][size]" value="${size}" readonly hidden>
                        <input type="number" class="form-control" name="sizes[${index}][quantity]" min="0" value="${existingSize ? existingSize.quantity : 0}">
                    </div>
                `;
                sizesContainer.appendChild(col);
            });
        }
    })
    .catch(error => {
        console.error('Error fetching product:', error);
        showMessage('Có lỗi xảy ra khi tải thông tin sản phẩm', 'danger');
    });

    // Fetch categories
    fetch(`${apiBase}/categories`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const categorySelect = document.getElementById('category');
            data.data.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.name;
                option.textContent = category.name;
                categorySelect.appendChild(option);
            });

            // Set selected category after categories are loaded
            fetch(`${apiBase}/products/${productId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('category').value = data.data.product.category;
                }
            });
        }
    })
    .catch(error => {
        console.error('Error fetching categories:', error);
        showMessage('Có lỗi xảy ra khi tải danh mục', 'danger');
    });

    // Handle form submission
    const form = document.getElementById('editProductForm');
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = {
            name: document.getElementById('name').value,
            description: document.getElementById('description').value,
            category: document.getElementById('category').value,
            price: parseFloat(document.getElementById('price').value),
            image: document.getElementById('image').value,
            sizes: []
        };

        // Get sizes data
        const sizeInputs = document.querySelectorAll('input[name^="sizes["]');
        sizeInputs.forEach((input, index) => {
            if (index % 2 === 1) { // Only process quantity inputs
                const sizeValue = sizeInputs[index - 1].value;
                const quantityValue = input.value;
                formData.sizes.push({
                    size: parseInt(sizeValue),
                    quantity: parseInt(quantityValue)
                });
            }
        });

        try {
            const response = await fetch(`${apiBase}/products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();
            console.log('Response:', data); // Add this line for debugging

            if (data.success) {
                showMessage('Cập nhật sản phẩm thành công!', 'success');
                setTimeout(() => {
                    window.location.href = '/admin/product';
                }, 1500);
            } else {
                showMessage(data.message || 'Có lỗi xảy ra khi cập nhật sản phẩm', 'danger');
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage('Có lỗi xảy ra khi cập nhật sản phẩm', 'danger');
        }
    });

    // Preview ảnh khi nhập link
    const imageInput = document.getElementById('image');
    const imagePreview = document.getElementById('imagePreview');
    
    imageInput.addEventListener('input', function() {
        const imageUrl = this.value.trim();
        if (imageUrl) {
            imagePreview.querySelector('img').src = imageUrl;
        }
    });

    // Format giá tiền khi nhập
    const priceInput = document.getElementById('price');
    priceInput.addEventListener('input', function() {
        if (this.value < 0) this.value = 0;
    });
});

// Function to show message
function showMessage(message, type = 'success') {
    const messageModal = new bootstrap.Modal(document.getElementById('messageModal'));
    const messageText = document.getElementById('messageText');
    const modalContent = document.querySelector('#messageModal .modal-content');
    
    // Set message
    messageText.textContent = message;
    
    // Set modal style based on type
    modalContent.className = 'modal-content';
    if (type === 'success') {
        modalContent.classList.add('border-success');
        document.querySelector('#messageModal .modal-header').className = 'modal-header bg-success text-white';
    } else {
        modalContent.classList.add('border-danger');
        document.querySelector('#messageModal .modal-header').className = 'modal-header bg-danger text-white';
    }
    
    // Show modal
    messageModal.show();
    
    // Auto hide after 3 seconds if success
    if (type === 'success') {
        setTimeout(() => {
            messageModal.hide();
        }, 3000);
    }
}
</script>

<!-- Message Modal -->
<div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="messageModalLabel">Thông báo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="messageText"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div> 